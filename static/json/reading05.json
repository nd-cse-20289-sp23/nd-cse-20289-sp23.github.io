{
    "q1": {
        "type": "multiple",
        "question": "\n<p>Given the following Python script, <tt>echo.py</tt>:</p>\n\n<pre>\n#!/usr/bin/env python3\n\nimport sys\n\nfor arg in sys.argv[1:]:\n    print(arg)\n</pre>\n\n<p>Which of the following statements are true (select all that apply)?</p>\n",
        "responses": {
            "module": "The line <tt>import sys</tt> loads the <tt>sys</tt> Python module.",
            "argv": "The command-line arguments to the script are stored in <tt>sys.argv</tt>.",
            "first": "Due to the <tt>[1:]</tt>, the script only prints out the first argument.",
            "print": "It is not necessary to include the parentheses in the <tt>print</tt> function.",
            "arg": "The <tt>arg</tt> variable needs a <tt>$</tt> in front of it just like in shell.",
            "shebang": "The <b>shebang</b> is necessary if we want to run the script with <tt>./echo.py</tt>."
        }
    },
    "q2": {
        "type": "multiple",
        "question": "\n<p>Given the following Python script, <tt>env.py</tt>:</p>\n\n<pre>\n#!/usr/bin/env python3\n\nimport os\n\nfor key, value in sorted(os.environ.items()):\n    print('{}={}'.format(key, value))\n</pre>\n\n<p>Which of the following statements are true (select all that apply)?</p>\n",
        "responses": {
            "dict": "The <tt>os.environ</tt> is a dictionary-like object.",
            "list": "The <tt>os.environ</tt> is a list-like object.",
            "svars": "This script prints all the variables inside the script.",
            "evars": "This script prints all environmental variables from the shell.",
            "scat": "Instead of <tt>print('{}={}'.format(key, value))</tt>, we could do <tt>print(key + '=' + value)</tt>.",
            "oldfmt": "Instead of <tt>print('{}={}'.format(key, value))</tt>, we could do <tt>print(f'{key}={value}')</tt>."
        }
    },
    "q3": {
        "type": "multiple",
        "question": "\n<p>Given the following Python script, <tt>pokemon.py</tt>:</p>\n\n<pre>\n#!/usr/bin/env python3\n\nPokemon = ['pikachu', 'charmander', 'bulbasaur', 'squirtle']\n\nfor pokemon in Pokemon:\n    if pokemon.endswith('r'):\n        print(pokemon.upper())\n    else:\n        print(pokemon.title())\n</pre>\n\n<p>Which of the following statements are true (select all that apply)?</p>\n",
        "responses": {
            "append": "To add 'meowth' to the list of <tt>Pokemon</tt>, we could do <tt>Pokemon.append('meowth')</tt>.",
            "push_back": "To add 'meowth' to the list of <tt>Pokemon</tt>, we could do <tt>Pokemon.push_back('meowth')</tt>.",
            "last_item": "To access the last item in the <tt>Pokemon</tt> list, we could do <tt>Pokemon[-1]</tt>",
            "endswith": "The <tt>pokemon.endswith('r')</tt> checks if the string ends with the letter <tt>r</tt>.",
            "upper": "The <tt>pokemon.upper()</tt> permanently converts the current <tt>pokemon</tt> string into upper-case.",
            "output": "The output of this script is <tt>PIKACHU CHARMANDER BULBASAUR SQUIRTLE</tt> (where each word is on a separate line)."
        }
    },
    "q4": {
        "type": "multiple",
        "question": "\n<p>Which of the following statements about <b>lists</b> and\n<b>dictionaries</b> are true (select all that apply)?</p>\n",
        "responses": {
            "datatypes": "Unlike a list, a dictionary can use many different data types as its index.",
            "updated": "Unlike a list, a dictionary cannot be updated after it has been declared.",
            "collection": "Like a list, a dictionary is a collection of many values.",
            "sliced": "Like a list, a dictionary can be sliced."
        }
    },
    "q5": {
        "type": "blank",
        "question": "\n<p>Given the following Python script, <tt>hp.py</tt>:</p>\n\n<pre>\n#!/usr/bin/env python3\n\nname   = 'Harry Potter and the Chamber of Secrets'\ncounts = {}\n\nfor letter in name.lower():\n    counts[letter] = counts.get(letter, 0) + 1\n</pre>\n\n<p>After executing the code in the <tt>hp.py</tt> script, what are the\nfollowing values?</p>\n\n<ol>\n    <li><tt>len(counts)</tt> ____</li>\n    <li><tt>counts['h']</tt> ____</li>\n    <li><tt>counts['e']</tt> ____</li>\n    <li><tt>counts['a']</tt> ____</li>\n    <li><tt>counts['r']</tt> ____</li>\n    <li><tt>counts['t']</tt> ____</li>\n    <li><tt>min(counts.values())</tt> ____</li>\n    <li><tt>max(counts.values())</tt> ____</li>\n</ol>\n"
    },
    "q6": {
        "type": "order",
        "question": "\n<p>Given the following Python script, <tt>words.py</tt>:\n\n<pre>\n#!/usr/bin/env python3\n\nwords  = 'Cushing Hall 326D is always so empty'\nfor word in words.split():\nprint(' '.join(result))\n            keep = False\n    for letter in word:\nresult = []\n        result.append(word)\n    keep = True\n        if letter.isdecimal():\n    if keep:\n</pre>\n\n<p>The code is suppose to remove all the words in the string that contain\nany numbers.  For instance, executing the script above should print out:\n\"Cushing Hall is always so empty\".  Unfortunately, the lines of code are\nscrambled.  Unscramble them below so that the script produces the correct\noutput.</p>\n",
        "responses": {
            "1": "<tt>words  = 'Cushing Hall 326D is always so empty'</tt>",
            "2": "<tt>    keep = True</tt>",
            "3": "<tt>print(' '.join(result))</tt>",
            "4": "<tt>            keep = False</tt>",
            "5": "<tt>result = []</tt>",
            "6": "<tt>    for letter in word:</tt>",
            "7": "<tt>        result.append(word)</tt>",
            "8": "<tt>for word in words.split():</tt>",
            "9": "<tt>        if letter.isdecimal():</tt>",
            "10": "<tt>    if keep:</tt>"
        }
    }
}
